/*
* generated by Xtext
*/
package org.ollabaca.on.ui.contentassist;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EEnumLiteral;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.ollabaca.on.model.EnumValue;
import org.ollabaca.on.model.Instance;
import org.ollabaca.on.model.Slot;
import org.ollabaca.on.util.Units;

/**
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on
 * how to customize content assistant
 */
public class ObjectNotationProposalProvider extends AbstractObjectNotationProposalProvider {

	Units units = new Units();

	public void completeInstance_Type(Instance object, Assignment assignment,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		// TODO Auto-generated method stub
		// super.completeInstance_Type(model, assignment, context, acceptor);

		// System.out.println(this + ": " + model);

		List<EClass> list = new ArrayList<>(Arrays.asList(units
				.getClasses(units.getUnit(object))));

		Slot slot = units.getSlot(object);
		if (slot != null) {
			EReference reference = units.getReference(slot);
			if (reference != null) {
				for (EClass eClass : new ArrayList<EClass>(list)) {
					if (!reference.getEReferenceType().isSuperTypeOf(eClass)) {
						list.remove(eClass);
					}
				}
			}
		}

		for (EClass eClass : list) {
			// System.out.println(eClass.getName() + ": "
			// + eClass.isAbstract());
			if (eClass.isAbstract() == false) {
				// System.out.println(eClass.getName());
				acceptor.accept(createCompletionProposal(eClass.getName(),
						context));
			}
		}

	}

	public void completeInstance_Slots(Instance object, Assignment assignment,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		completeRuleCall(((RuleCall) assignment.getTerminal()), context,
				acceptor);

		for (EStructuralFeature feature : units.getFeatures(object)) {
			// System.out.println(feature.getName());
			acceptor.accept(createCompletionProposal(String.format("%s = ", feature.getName()), context));

		}
	}

	@Override
	public void complete_Import(EObject model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

		for (String s : EPackage.Registry.INSTANCE.keySet()) {
			acceptor.accept(createCompletionProposal(
					String.format("import \"%s\"", s), context));
		}
	}

	@Override
	public void completeImport_Name(EObject model, Assignment assignment,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		for (String s : EPackage.Registry.INSTANCE.keySet()) {
			acceptor.accept(createCompletionProposal(
					String.format("\"%s\"", s), context));
		}

	}

	public void completeSlot_Value(Slot model, Assignment assignment,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

		EStructuralFeature feature = units.getFeature(model);
		if (feature == null) {
			super.completeInstance_Slots(model, assignment, context, acceptor);
			return;
		}

		if (feature.isMany()) {
			acceptor.accept(createCompletionProposal("[", context));
			return;
		}
		
		EEnum eEnum = units.getEnum(model);
		if (eEnum != null) {
			for (EEnumLiteral literal : eEnum.getELiterals()) {
				acceptor.accept(createCompletionProposal(
						String.format("#%s", literal.getName()), context));
			}
			return;
		}

		// TODO Auto-generated method stub
		// super.completeSlot_Value(model, assignment, context, acceptor);
		System.out.println("!!!completeSlot_Value!!!");
	}

	public void complete_EnumValue(EnumValue model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		EEnum eEnum = units.getEnum(units.getSlot(model));
		if (eEnum != null) {
			for (EEnumLiteral literal : eEnum.getELiterals()) {
				acceptor.accept(createCompletionProposal(
						String.format("%s", literal.getName()), context));
			}
		}
		// TODO Auto-generated method stub
		// super.complete_EnumValue(model, ruleCall, context, acceptor);
	}

	public void completeKeyword(Keyword object, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		System.out.println("completeKeyword " + object);
		super.completeKeyword(object, context, acceptor);
	}

	public void completeRuleCall(RuleCall object, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		System.out.println("completeRuleCall " + object);

		super.completeRuleCall(object, context, acceptor);
	}

	public void completeAssignment(Assignment object,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

		System.out.println("completeAssignment " + object);
		super.completeAssignment(object, context, acceptor);

	}
	
	public void complete_Slot(Slot model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		
		for (EStructuralFeature feature : units.getFeatures(units.getInstance(model))) {
			// System.out.println(feature.getName());
			acceptor.accept(createCompletionProposal(String.format("%s = ", feature.getName()), context));

		}
	}

}