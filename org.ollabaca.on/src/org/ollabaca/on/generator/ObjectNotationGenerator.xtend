/*
 * generated by Xtext
 */
package org.ollabaca.on.generator

import java.util.Collections
import org.eclipse.core.resources.IFile
import org.eclipse.core.resources.IProject
import org.eclipse.core.resources.ResourcesPlugin
import org.eclipse.core.runtime.Path
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.resource.Resource$Factory$Registry
import org.eclipse.emf.ecore.util.EcoreUtil
import org.eclipse.emf.ecore.xmi.XMLResource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IFileSystemAccessExtension2
import org.eclipse.xtext.generator.IGenerator
import org.ollabaca.on.util.Visitor


class ObjectNotationGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		
		if (!(fsa instanceof IFileSystemAccessExtension2)) {
			System::out.println("ERROR: not instanceof FSAExt2")
			return
		}
		
   		var resourceSet = resource.resourceSet
   		      	
      	var IProject project = ResourcesPlugin::workspace.root.getFile(new Path(resource.URI.toPlatformString(true))).project
      	
   		var Visitor visitor = new Visitor
   		project.getFolder("src").accept(visitor)
   		for (IFile file: visitor.files) {
      		System::out.println("LOAD: " + file.fullPath)
   			resourceSet.getResource(URI::createPlatformResourceURI(file.fullPath.toString, true), true)
   		}
   		
		
		var URI all = (fsa as IFileSystemAccessExtension2).getURI("instances.xmi")
		var XMLResource out = Resource$Factory$Registry::INSTANCE.getFactory(all).createResource(all) as XMLResource
		out.contents.addAll(new ProjectToXmi(resourceSet, project.name).build())
		
		// force id
		for (e: out.allContents.toIterable) {
			out.setID(e, EcoreUtil::generateUUID)
		}
		
		out.save(Collections::EMPTY_MAP)
		
//		val site = out.contents.filter(typeof(Site)).head
//		
//		if (site != null) {
//			val siteToHtml = new SiteToHtml(site)
//			val Set<ObjectRenderer> renderers = newHashSet()
//			for (e: RendererFactory::factories) {
//				renderers.add(e.newRenderer(siteToHtml))
//			}
//			fsa.generateFile("doc.html", siteToHtml.html(renderers))
//		}

		//new ToXWiki().doGenerate(out, fsa)
		
//			for (g: Activator::instance.generators) {
//				try {
//				g.doGenerate(out, fsa);
//				
//				} catch (Exception e) {
//					e.printStackTrace
//				}
//			}
		
		//fsa.generateFile("gexf.gexf", new ToGexf().graph(out.contents))
		
		//var URI srcGen = (fsa as IFileSystemAccessExtension2).getURI("./")
		
		//for (e: resource.allContents.toIterable.filter(typeof(Unit))) {
			
//			var URI res = resource.URI
//			
//			var String file = res.toString.substring(Strings::longestSubstr(srcGen.toString, res.toString))
//			
//			//resource.
//			var URI uri = (fsa as IFileSystemAccessExtension2).getURI(file).trimFileExtension.appendFileExtension(e.^extension)
//		
//			var Resource out = Resource$Factory$Registry::INSTANCE.getFactory(uri).createResource(uri)
//			//factory.createResource(uri);
//		
//			out.contents.addAll(new XGenerator(resource).build())
//			out.save(Collections::EMPTY_MAP)
//
//			for (g: Activator::instance.generators) {
//				g.doGenerate(out, fsa);
//			}
			
			// json
//			uri =  (fsa as IFileSystemAccessExtension2).getURI(file).trimFileExtension.appendFileExtension("json")
//			out = Resource$Factory$Registry::INSTANCE.getFactory(uri).createResource(uri)
//			out.contents.addAll(new XGenerator(resource).build())
//			
//			var Map<String, Object> options = new HashMap<String, Object>();
//			options.put(EMFJs::OPTION_INDENT_OUTPUT, true);
//			options.put(EMFJs::OPTION_SERIALIZE_TYPE, false);		
//			out.save(options)
		}
		
	//}
		
}
