/*
 * generated by Xtext
 */
package org.ollabaca.on.generator

import java.util.Collections
import org.eclipse.core.resources.IFile
import org.eclipse.core.resources.IProject
import org.eclipse.core.resources.ResourcesPlugin
import org.eclipse.core.runtime.Path
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.resource.Resource$Factory$Registry
import org.eclipse.emf.ecore.util.EcoreUtil
import org.eclipse.emf.ecore.xmi.XMLResource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IFileSystemAccessExtension2
import org.eclipse.xtext.generator.IGenerator
import org.ollabaca.on.util.Visitor
import java.util.Set
import org.eclipse.emf.common.util.Diagnostic
import org.eclipse.core.resources.IMarker
import org.eclipse.core.resources.IResource
import org.eclipse.core.resources.IWorkspace

class ObjectNotationGenerator implements IGenerator {
	
	static val MARKER = "org.ollabaca.on.marker"
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		
		if (!(fsa instanceof IFileSystemAccessExtension2)) {
			System::out.println("ERROR: not instanceof FSAExt2")
			return
		}
		
   		var resourceSet = resource.resourceSet
      	var IProject project = ResourcesPlugin::workspace.root.getFile(new Path(resource.URI.toPlatformString(true))).project
   		var Set<IProject> projects = newHashSet()
      	project.fill(projects)
      	
   		var Visitor visitor = new Visitor
   		for (p: projects) {
	   		p.getFolder("src").accept(visitor)
			for (IFile file: visitor.files) {
				System::out.println("LOAD: " + file.fullPath)
				file.deleteMarkers(MARKER, true, IResource::DEPTH_INFINITE)
				resourceSet.getResource(URI::createPlatformResourceURI(file.fullPath.toString, true), true)
			}   		
   		}
   		
		
		var URI all = (fsa as IFileSystemAccessExtension2).getURI("instances.xmi")
		var XMLResource out = Resource$Factory$Registry::INSTANCE.getFactory(all).createResource(all) as XMLResource
		
		val projectToXmi = new ProjectToXmi(resourceSet, project.name)
		out.contents.addAll(projectToXmi.build())
		
		// force id
		for (e: out.allContents.toIterable) {
			out.setID(e, EcoreUtil::generateUUID)
		}
		
		out.save(Collections::EMPTY_MAP)
		
		// validation & marker
		
		
	
		for (e: projectToXmi.validate.entrySet) {
			if (e.value.severity != Diagnostic.OK) {
				val eUri = e.key.eResource.getURI()
				if (eUri.isPlatformResource()) {
					val iResource = ResourcesPlugin::getWorkspace().getRoot().findMember(eUri.toPlatformString(true))
					iResource.getWorkspace().run([
						for (c: e.value.children) {
							val marker = iResource.createMarker(MARKER)
							switch (c.severity) {
								case Diagnostic::ERROR:
									marker.setAttribute(IMarker::SEVERITY, IMarker::SEVERITY_ERROR)
								case Diagnostic::WARNING:
									marker.setAttribute(IMarker::SEVERITY, IMarker::SEVERITY_WARNING)
								case Diagnostic::INFO:
									marker.setAttribute(IMarker::SEVERITY, IMarker::SEVERITY_INFO)
							}
							marker.setAttribute(IMarker::MESSAGE, c.message)
							System::out.println(marker)
						}
					], null, IWorkspace::AVOID_UPDATE, null);
		
				}
			}
		}
	
		
	}
		
	def void fill(IProject object, Set<IProject> projects) {
		if (projects.contains(object)) {
			return 
		}
		System::out.println("fill: " + object)
		projects.add(object)
		for (e: object.referencedProjects) {
			e.fill(projects)
		}
	}
}
