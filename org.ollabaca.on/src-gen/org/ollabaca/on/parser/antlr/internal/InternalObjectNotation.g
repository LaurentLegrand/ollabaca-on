/*
* generated by Xtext
*/
grammar InternalObjectNotation;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.ollabaca.on.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.ollabaca.on.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.ollabaca.on.services.ObjectNotationGrammarAccess;

}

@parser::members {

 	private ObjectNotationGrammarAccess grammarAccess;
 	
    public InternalObjectNotationParser(TokenStream input, ObjectNotationGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Unit";	
   	}
   	
   	@Override
   	protected ObjectNotationGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleUnit
entryRuleUnit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnitRule()); }
	 iv_ruleUnit=ruleUnit 
	 { $current=$iv_ruleUnit.current; } 
	 EOF 
;

// Rule Unit
ruleUnit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getUnitAccess().getImportsImportParserRuleCall_0_0()); 
	    }
		lv_imports_0_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnitRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_0_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)+(	otherlv_1='parent' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnitAccess().getParentKeyword_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnitRule());
	        }
        }
	otherlv_2=RULE_FQN
	{
		newLeafNode(otherlv_2, grammarAccess.getUnitAccess().getParentInstanceCrossReference_1_1_0()); 
	}

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getUnitAccess().getContainerContainerParserRuleCall_2_0()); 
	    }
		lv_container_3_0=ruleContainer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnitRule());
	        }
       		set(
       			$current, 
       			"container",
        		lv_container_3_0, 
        		"Container");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getUnitAccess().getInstancesInstanceParserRuleCall_3_0()); 
	    }
		lv_instances_4_0=ruleInstance		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnitRule());
	        }
       		add(
       			$current, 
       			"instances",
        		lv_instances_4_0, 
        		"Instance");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current; } 
	 EOF 
;

// Rule Value
ruleValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getValueAccess().getInstanceParserRuleCall_0()); 
    }
    this_Instance_0=ruleInstance
    { 
        $current = $this_Instance_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getArrayParserRuleCall_1()); 
    }
    this_Array_1=ruleArray
    { 
        $current = $this_Array_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getInstanceRefParserRuleCall_2()); 
    }
    this_InstanceRef_2=ruleInstanceRef
    { 
        $current = $this_InstanceRef_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getLiteralParserRuleCall_3()); 
    }
    this_Literal_3=ruleLiteral
    { 
        $current = $this_Literal_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getStringValueParserRuleCall_0()); 
    }
    this_StringValue_0=ruleStringValue
    { 
        $current = $this_StringValue_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getBooleanValueParserRuleCall_1()); 
    }
    this_BooleanValue_1=ruleBooleanValue
    { 
        $current = $this_BooleanValue_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getNullValueParserRuleCall_2()); 
    }
    this_NullValue_2=ruleNullValue
    { 
        $current = $this_NullValue_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getNumberValueParserRuleCall_3()); 
    }
    this_NumberValue_3=ruleNumberValue
    { 
        $current = $this_NumberValue_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getEnumValueParserRuleCall_4()); 
    }
    this_EnumValue_4=ruleEnumValue
    { 
        $current = $this_EnumValue_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		lv_name_1_0=RULE_MY_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getImportAccess().getNameMY_STRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"MY_STRING");
	    }

)
))
;





// Entry rule entryRuleContainer
entryRuleContainer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContainerRule()); }
	 iv_ruleContainer=ruleContainer 
	 { $current=$iv_ruleContainer.current; } 
	 EOF 
;

// Rule Container
ruleContainer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='container' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getContainerAccess().getContainerKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainerRule());
	        }
        }
	otherlv_1=RULE_FQN
	{
		newLeafNode(otherlv_1, grammarAccess.getContainerAccess().getInstanceInstanceCrossReference_1_0()); 
	}

)
)	otherlv_2='#' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getContainerAccess().getNumberSignKeyword_2());
    }
(
(
		lv_feature_3_0=RULE_ID
		{
			newLeafNode(lv_feature_3_0, grammarAccess.getContainerAccess().getFeatureIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainerRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"feature",
        		lv_feature_3_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleInstance
entryRuleInstance returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstanceRule()); }
	 iv_ruleInstance=ruleInstance 
	 { $current=$iv_ruleInstance.current; } 
	 EOF 
;

// Rule Instance
ruleInstance returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getInstanceAccess().getInstanceAction_0(),
            $current);
    }
)(	otherlv_1='@title' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInstanceAccess().getTitleKeyword_1_0());
    }
(
(
		lv_title_2_0=RULE_MY_STRING
		{
			newLeafNode(lv_title_2_0, grammarAccess.getInstanceAccess().getTitleMY_STRINGTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstanceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"title",
        		lv_title_2_0, 
        		"MY_STRING");
	    }

)
))?(	otherlv_3='@abstract' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInstanceAccess().getAbstractKeyword_2_0());
    }
(
(
		lv_abstract_4_0=RULE_MY_STRING
		{
			newLeafNode(lv_abstract_4_0, grammarAccess.getInstanceAccess().getAbstractMY_STRINGTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstanceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"abstract",
        		lv_abstract_4_0, 
        		"MY_STRING");
	    }

)
))?(	otherlv_5='@doc' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getInstanceAccess().getDocKeyword_3_0());
    }
(
(
		lv_documentation_6_0=RULE_MY_STRING
		{
			newLeafNode(lv_documentation_6_0, grammarAccess.getInstanceAccess().getDocumentationMY_STRINGTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstanceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"documentation",
        		lv_documentation_6_0, 
        		"MY_STRING");
	    }

)
))?(	otherlv_7='@abbr' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getInstanceAccess().getAbbrKeyword_4_0());
    }
(
(
		lv_abbr_8_0=RULE_ID
		{
			newLeafNode(lv_abbr_8_0, grammarAccess.getInstanceAccess().getAbbrIDTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstanceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"abbr",
        		lv_abbr_8_0, 
        		"ID");
	    }

)
))?(	otherlv_9='@see' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getInstanceAccess().getSeeKeyword_5_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstanceRule());
	        }
        }
	otherlv_10=RULE_FQN
	{
		newLeafNode(otherlv_10, grammarAccess.getInstanceAccess().getSeeInstanceCrossReference_5_1_0()); 
	}

)
))*(	otherlv_11='@tag' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getInstanceAccess().getTagKeyword_6_0());
    }
(
(
		lv_tags_12_0=RULE_ID
		{
			newLeafNode(lv_tags_12_0, grammarAccess.getInstanceAccess().getTagsIDTerminalRuleCall_6_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstanceRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"tags",
        		lv_tags_12_0, 
        		"ID");
	    }

)
))*((
(
		lv_name_13_0=RULE_ID
		{
			newLeafNode(lv_name_13_0, grammarAccess.getInstanceAccess().getNameIDTerminalRuleCall_7_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstanceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_13_0, 
        		"ID");
	    }

)
)	otherlv_14='=' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getInstanceAccess().getEqualsSignKeyword_7_1());
    }
)?	otherlv_15='new' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getInstanceAccess().getNewKeyword_8());
    }
(
(
		lv_type_16_0=RULE_ID
		{
			newLeafNode(lv_type_16_0, grammarAccess.getInstanceAccess().getTypeIDTerminalRuleCall_9_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstanceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_16_0, 
        		"ID");
	    }

)
)	otherlv_17='{' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getInstanceAccess().getLeftCurlyBracketKeyword_10());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstanceAccess().getSlotsSlotParserRuleCall_11_0()); 
	    }
		lv_slots_18_0=ruleSlot		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceRule());
	        }
       		add(
       			$current, 
       			"slots",
        		lv_slots_18_0, 
        		"Slot");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_19='}' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getInstanceAccess().getRightCurlyBracketKeyword_12());
    }
)
;





// Entry rule entryRuleSlot
entryRuleSlot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSlotRule()); }
	 iv_ruleSlot=ruleSlot 
	 { $current=$iv_ruleSlot.current; } 
	 EOF 
;

// Rule Slot
ruleSlot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSlotAccess().getSlotAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSlotAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSlotRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSlotAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSlotAccess().getValueValueParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSlotRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleArray
entryRuleArray returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayRule()); }
	 iv_ruleArray=ruleArray 
	 { $current=$iv_ruleArray.current; } 
	 EOF 
;

// Rule Array
ruleArray returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArrayAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayAccess().getValueValueParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayRule());
	        }
       		add(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArrayAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRuleStringValue
entryRuleStringValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringValueRule()); }
	 iv_ruleStringValue=ruleStringValue 
	 { $current=$iv_ruleStringValue.current; } 
	 EOF 
;

// Rule StringValue
ruleStringValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_MY_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getStringValueAccess().getValueMY_STRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"MY_STRING");
	    }

)
)
;





// Entry rule entryRuleBooleanValue
entryRuleBooleanValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanValueRule()); }
	 iv_ruleBooleanValue=ruleBooleanValue 
	 { $current=$iv_ruleBooleanValue.current; } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_value_0_0=	'true' 
    {
        newLeafNode(lv_value_0_0, grammarAccess.getBooleanValueAccess().getValueTrueKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanValueRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_0_0, "true");
	    }

)
)
    |(
(
		lv_value_1_0=	'false' 
    {
        newLeafNode(lv_value_1_0, grammarAccess.getBooleanValueAccess().getValueFalseKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanValueRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_1_0, "false");
	    }

)
))
;





// Entry rule entryRuleNullValue
entryRuleNullValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNullValueRule()); }
	 iv_ruleNullValue=ruleNullValue 
	 { $current=$iv_ruleNullValue.current; } 
	 EOF 
;

// Rule NullValue
ruleNullValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNullValueAccess().getNullValueAction_0(),
            $current);
    }
)	otherlv_1='null' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNullValueAccess().getNullKeyword_1());
    }
)
;





// Entry rule entryRuleNumberValue
entryRuleNumberValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberValueRule()); }
	 iv_ruleNumberValue=ruleNumberValue 
	 { $current=$iv_ruleNumberValue.current; } 
	 EOF 
;

// Rule NumberValue
ruleNumberValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_NUMBER
		{
			newLeafNode(lv_value_0_0, grammarAccess.getNumberValueAccess().getValueNUMBERTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"NUMBER");
	    }

)
)
;





// Entry rule entryRuleInstanceRef
entryRuleInstanceRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstanceRefRule()); }
	 iv_ruleInstanceRef=ruleInstanceRef 
	 { $current=$iv_ruleInstanceRef.current; } 
	 EOF 
;

// Rule InstanceRef
ruleInstanceRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstanceRefRule());
	        }
        }
	otherlv_0=RULE_FQN
	{
		newLeafNode(otherlv_0, grammarAccess.getInstanceRefAccess().getValueInstanceCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleEnumValue
entryRuleEnumValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumValueRule()); }
	 iv_ruleEnumValue=ruleEnumValue 
	 { $current=$iv_ruleEnumValue.current; } 
	 EOF 
;

// Rule EnumValue
ruleEnumValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='#' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEnumValueAccess().getNumberSignKeyword_0());
    }
(
(
		lv_value_1_0=RULE_ID
		{
			newLeafNode(lv_value_1_0, grammarAccess.getEnumValueAccess().getValueIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"ID");
	    }

)
))
;







RULE_MY_STRING : '"' ('\\"'|~('"'))* '"';

RULE_NUMBER : ('0'|'-'? '1'..'9' ('0'..'9')* ('.' ('0'..'9')+)? ('e' ('+'|'-') '1'..'9' ('0'..'9')*)?);

RULE_FQN : ('/' RULE_ID)*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'-'|'.')*;

RULE_LONG_STRING : '("' ( options {greedy=false;} : . )*'")';

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


